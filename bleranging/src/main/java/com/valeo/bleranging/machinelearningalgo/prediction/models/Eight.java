/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-06-14T14:43:12.520+02:00
  3.10.4.2
  
  Standalone prediction code with sample test data for DeepLearningModel named Eight

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/Eight > Eight.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m Eight.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/

import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name = "Eight", algorithm = "deeplearning")
public class Eight extends GenModel {
  // Workspace for categorical offsets.
  public static final int[] CATOFFSETS = {0};
  // Number of neurons for each layer.
  public static final int[] NEURONS = {8, 16, 16, 5};
    // Neuron bias values.
    public static final double[][] BIAS = new double[][]{
      /* Input */ Eight_Bias_0.VALUES,
      /* Rectifier */ Eight_Bias_1.VALUES,
      /* Rectifier */ Eight_Bias_2.VALUES,
      /* Softmax */ Eight_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][]{
      /* Input */ Eight_Weight_0.VALUES,
      /* Rectifier */ Eight_Weight_1.VALUES,
      /* Rectifier */ Eight_Weight_2.VALUES,
      /* Softmax */ Eight_Weight_3.VALUES
    };
  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_Eight.VALUES;
  // Number of output classes included in training data response column.
  public static final int NCLASSES = 5;
  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][]{
    /* RSSI LEFT_ORIGIN */ null,
    /* RSSI MIDDLE_ORIGIN */ null,
    /* RSSI RIGHT_ORIGIN */ null,
    /* RSSI TRUNK_ORIGIN */ null,
    /* RSSI FRONTLEFT_ORIGIN */ null,
    /* RSSI FRONTRIGHT_ORIGIN */ null,
    /* RSSI REARLEFT_ORIGIN */ null,
    /* RSSI REARRIGHT_ORIGIN */ null,
    /* class */ Eight_ColInfo_8.VALUES
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {0.2, 0.2, 0.2, 0.2, 0.2};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = null;
  // Thread-local storage for input neuron activation values.
  final double[] NUMS = new double[8];
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][]{
      /* Input */ Eight_Activation_0.VALUES,
      /* Rectifier */ Eight_Activation_1.VALUES,
      /* Rectifier */ Eight_Activation_2.VALUES,
      /* Softmax */ Eight_Activation_3.VALUES
    };

  public Eight() {
    super(NAMES, DOMAINS);
  }

  public hex.ModelCategory getModelCategory() {
    return hex.ModelCategory.Multinomial;
  }

  public boolean isSupervised() {
    return true;
  }

  public int nfeatures() {
    return 8;
  }

  public int nclasses() {
    return 5;
  }

  public String getUUID() {
    return Long.toString(74096682342718736L);
  }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0(double[] data, double[] preds) {
    java.util.Arrays.fill(preds, 0);
    java.util.Arrays.fill(NUMS, 0);
    int i = 0, ncats = 0;
    final int n = data.length;
    for (; i < n; ++i) {
      NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i]) * NORMMUL.VALUES[i];
    }
    java.util.Arrays.fill(ACTIVATION[0], 0);
    for (i = 0; i < NUMS.length; ++i) {
      ACTIVATION[0][CATOFFSETS[CATOFFSETS.length - 1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
    }
    for (i = 1; i < ACTIVATION.length; ++i) {
      java.util.Arrays.fill(ACTIVATION[i], 0);
      int cols = ACTIVATION[i - 1].length;
      int rows = ACTIVATION[i].length;
      int extra = cols - cols % 8;
      int multiple = (cols / 8) * 8 - 1;
      int idx = 0;
      float[] a = WEIGHT[i];
      double[] x = ACTIVATION[i - 1];
      double[] y = BIAS[i];
      double[] res = ACTIVATION[i];
      for (int row = 0; row < rows; ++row) {
        double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
        for (int col = 0; col < multiple; col += 8) {
          int off = idx + col;
          psum0 += a[off] * x[col];
          psum1 += a[off + 1] * x[col + 1];
          psum2 += a[off + 2] * x[col + 2];
          psum3 += a[off + 3] * x[col + 3];
          psum4 += a[off + 4] * x[col + 4];
          psum5 += a[off + 5] * x[col + 5];
          psum6 += a[off + 6] * x[col + 6];
          psum7 += a[off + 7] * x[col + 7];
        }
        res[row] += psum0 + psum1 + psum2 + psum3;
        res[row] += psum4 + psum5 + psum6 + psum7;
        for (int col = extra; col < cols; col++)
          res[row] += a[idx + col] * x[col];
        res[row] += y[row];
        idx += cols;
      }
      if (i < ACTIVATION.length - 1) {
        for (int r = 0; r < ACTIVATION[i].length; ++r) {
          ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
        }
      }
      if (i == ACTIVATION.length - 1) {
        double max = ACTIVATION[i][0];
        for (int r = 1; r < ACTIVATION[i].length; r++) {
          if (ACTIVATION[i][r] > max) max = ACTIVATION[i][r];
        }
        double scale = 0;
        for (int r = 0; r < ACTIVATION[i].length; r++) {
          ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
          scale += ACTIVATION[i][r];
        }
        for (int r = 0; r < ACTIVATION[i].length; r++) {
          if (Double.isNaN(ACTIVATION[i][r]))
            throw new RuntimeException("Numerical instability, predicted NaN.");
          ACTIVATION[i][r] /= scale;
          preds[r + 1] = ACTIVATION[i][r];
        }
      }
    }
    preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
    return preds;
  }

  static class NORMMUL implements java.io.Serializable {
    public static final double[] VALUES = new double[8];
    static {
      NORMMUL_0.fill(VALUES);
    }
    static final class NORMMUL_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = 0.16312175496868794;
        sa[1] = 0.14457615311936295;
        sa[2] = 0.15797965604482847;
        sa[3] = 0.13488702615069034;
        sa[4] = 0.09895382322290411;
        sa[5] = 0.0990118593643039;
        sa[6] = 0.1008548377900005;
        sa[7] = 0.10356721403928203;
      }
    }
  }

  static class NORMSUB implements java.io.Serializable {
    public static final double[] VALUES = new double[8];
    static {
      NORMSUB_0.fill(VALUES);
    }
    static final class NORMSUB_0 implements java.io.Serializable {
      static final void fill(double[] sa) {
        sa[0] = -78.63175000000001;
        sa[1] = -78.26831249999998;
        sa[2] = -75.74440625;
        sa[3] = -75.594875;
        sa[4] = -72.63703125;
        sa[5] = -77.70034375000002;
        sa[6] = -68.30903125;
        sa[7] = -70.1905;
      }
    }
  }
}
// Neuron activation values for Input layer
class Eight_Activation_0 implements java.io.Serializable {
  public static final double[] VALUES = new double[8];
  static {
    Eight_Activation_0_0.fill(VALUES);
  }
  static final class Eight_Activation_0_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class Eight_Activation_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    Eight_Activation_1_0.fill(VALUES);
  }
  static final class Eight_Activation_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Rectifier layer
class Eight_Activation_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    Eight_Activation_2_0.fill(VALUES);
  }
  static final class Eight_Activation_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
      sa[5] = 0.0;
      sa[6] = 0.0;
      sa[7] = 0.0;
      sa[8] = 0.0;
      sa[9] = 0.0;
      sa[10] = 0.0;
      sa[11] = 0.0;
      sa[12] = 0.0;
      sa[13] = 0.0;
      sa[14] = 0.0;
      sa[15] = 0.0;
    }
  }
}
// Neuron activation values for Softmax layer
class Eight_Activation_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    Eight_Activation_3_0.fill(VALUES);
  }
  static final class Eight_Activation_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.0;
      sa[1] = 0.0;
      sa[2] = 0.0;
      sa[3] = 0.0;
      sa[4] = 0.0;
    }
  }
}
// Neuron bias values for Input layer
class Eight_Bias_0 implements java.io.Serializable {
  public static final double[] VALUES = null;
}
// Neuron bias values for Rectifier layer
class Eight_Bias_1 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    Eight_Bias_1_0.fill(VALUES);
  }
  static final class Eight_Bias_1_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.6545664067003331;
      sa[1] = 0.36948187180140163;
      sa[2] = 0.8518912820587949;
      sa[3] = 0.1340095129037662;
      sa[4] = 0.9377140419273412;
      sa[5] = 0.0444993970382196;
      sa[6] = 0.4608385756269461;
      sa[7] = 0.07973115200971143;
      sa[8] = 0.5250734468871017;
      sa[9] = 1.0143565716586178;
      sa[10] = 0.4516566361474151;
      sa[11] = -0.009056503310768248;
      sa[12] = -0.08799666665233191;
      sa[13] = 0.7470818374671313;
      sa[14] = 0.32070268932630785;
      sa[15] = 0.017579913839302026;
    }
  }
}
// Neuron bias values for Rectifier layer
class Eight_Bias_2 implements java.io.Serializable {
  public static final double[] VALUES = new double[16];
  static {
    Eight_Bias_2_0.fill(VALUES);
  }
  static final class Eight_Bias_2_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 1.1326069986203469;
      sa[1] = 0.7805497375002193;
      sa[2] = 0.9604243557856146;
      sa[3] = 1.2231267928793705;
      sa[4] = 1.0965640924158382;
      sa[5] = 1.2952127809128955;
      sa[6] = 0.8337868506293309;
      sa[7] = 1.0830057162718247;
      sa[8] = 1.2186724914804137;
      sa[9] = 0.5221081921080735;
      sa[10] = 0.8420950262768669;
      sa[11] = 0.8171441715651185;
      sa[12] = 0.7591297737232066;
      sa[13] = 1.2005644682287417;
      sa[14] = 1.2822190686056343;
      sa[15] = 1.0527852178471278;
    }
  }
}
// Neuron bias values for Softmax layer
class Eight_Bias_3 implements java.io.Serializable {
  public static final double[] VALUES = new double[5];
  static {
    Eight_Bias_3_0.fill(VALUES);
  }
  static final class Eight_Bias_3_0 implements java.io.Serializable {
    static final void fill(double[] sa) {
      sa[0] = 0.07818046689843718;
      sa[1] = 0.19937623694252798;
      sa[2] = 0.25164035136093027;
      sa[3] = 0.1488824760665462;
      sa[4] = 0.09331635257746054;
    }
  }
}
class Eight_Weight_0 implements java.io.Serializable {
  public static final float[] VALUES = null;
}
// Neuron weights connecting Input and Rectifier layer
class Eight_Weight_1 implements java.io.Serializable {
  public static final float[] VALUES = new float[128];
  static {
    Eight_Weight_1_0.fill(VALUES);
  }
  static final class Eight_Weight_1_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.7149129f;
      sa[1] = 0.65745157f;
      sa[2] = 0.09370831f;
      sa[3] = -0.30335948f;
      sa[4] = -0.103081904f;
      sa[5] = -0.4882008f;
      sa[6] = -0.38481057f;
      sa[7] = 0.60986793f;
      sa[8] = -0.9336216f;
      sa[9] = 0.46629456f;
      sa[10] = -0.028510116f;
      sa[11] = -0.3382053f;
      sa[12] = 0.46233606f;
      sa[13] = 0.670866f;
      sa[14] = -0.4527499f;
      sa[15] = -0.11031418f;
      sa[16] = 0.16556475f;
      sa[17] = -0.31128168f;
      sa[18] = -0.07661242f;
      sa[19] = 0.039870597f;
      sa[20] = -0.10593276f;
      sa[21] = -0.15524854f;
      sa[22] = 1.2968218f;
      sa[23] = 0.057632644f;
      sa[24] = -0.15223616f;
      sa[25] = 1.252205f;
      sa[26] = -0.09371966f;
      sa[27] = 0.6524092f;
      sa[28] = -0.46346045f;
      sa[29] = -0.047646727f;
      sa[30] = 0.2871444f;
      sa[31] = 0.18285432f;
      sa[32] = -0.6081999f;
      sa[33] = -0.43318236f;
      sa[34] = 0.2654926f;
      sa[35] = -0.09390605f;
      sa[36] = 0.8436223f;
      sa[37] = 0.025810976f;
      sa[38] = -0.8713887f;
      sa[39] = 0.33205345f;
      sa[40] = -0.012009095f;
      sa[41] = 0.18374695f;
      sa[42] = -0.010301663f;
      sa[43] = 0.20862283f;
      sa[44] = 0.0151528455f;
      sa[45] = 1.2179296f;
      sa[46] = -0.06990452f;
      sa[47] = 0.027722575f;
      sa[48] = 0.26263905f;
      sa[49] = 0.096595205f;
      sa[50] = 0.006567263f;
      sa[51] = 0.2657172f;
      sa[52] = 0.9959562f;
      sa[53] = 0.14684264f;
      sa[54] = 0.06905021f;
      sa[55] = -0.25584576f;
      sa[56] = 0.14859279f;
      sa[57] = 0.65661204f;
      sa[58] = 0.1987704f;
      sa[59] = -0.3548217f;
      sa[60] = -0.15264681f;
      sa[61] = -0.43200415f;
      sa[62] = 0.817825f;
      sa[63] = 0.3289707f;
      sa[64] = 0.24038227f;
      sa[65] = -0.1802558f;
      sa[66] = -0.19132113f;
      sa[67] = -0.32508835f;
      sa[68] = -0.40576187f;
      sa[69] = 0.40742293f;
      sa[70] = -0.3646284f;
      sa[71] = 0.6268377f;
      sa[72] = -0.21905129f;
      sa[73] = -0.23580496f;
      sa[74] = -0.88557f;
      sa[75] = -0.8646138f;
      sa[76] = 0.4792303f;
      sa[77] = -0.08527619f;
      sa[78] = 0.0127198845f;
      sa[79] = 0.04430705f;
      sa[80] = -0.053444054f;
      sa[81] = -0.6428125f;
      sa[82] = -0.109368645f;
      sa[83] = -0.21761318f;
      sa[84] = -0.6237657f;
      sa[85] = -0.37244406f;
      sa[86] = -0.56743014f;
      sa[87] = -0.123622954f;
      sa[88] = 0.19885024f;
      sa[89] = 0.07468696f;
      sa[90] = 0.20103988f;
      sa[91] = -0.54043925f;
      sa[92] = 0.60801023f;
      sa[93] = -0.7030505f;
      sa[94] = 0.16188577f;
      sa[95] = -1.0102353f;
      sa[96] = 0.21177602f;
      sa[97] = -0.3603889f;
      sa[98] = -0.7660931f;
      sa[99] = 0.6527461f;
      sa[100] = 0.45856044f;
      sa[101] = -0.18943828f;
      sa[102] = -0.23139726f;
      sa[103] = 0.18466811f;
      sa[104] = -0.4906823f;
      sa[105] = 0.4534123f;
      sa[106] = -0.2071056f;
      sa[107] = -0.5102383f;
      sa[108] = 0.01135042f;
      sa[109] = -0.83194524f;
      sa[110] = -0.23161055f;
      sa[111] = -0.16568497f;
      sa[112] = 0.39306954f;
      sa[113] = -0.15167174f;
      sa[114] = 0.36150974f;
      sa[115] = -0.39925012f;
      sa[116] = 0.14682657f;
      sa[117] = -0.09355822f;
      sa[118] = -0.2886299f;
      sa[119] = 0.16479504f;
      sa[120] = -0.073650554f;
      sa[121] = -0.11267498f;
      sa[122] = 0.26833847f;
      sa[123] = -0.5341162f;
      sa[124] = -0.29590765f;
      sa[125] = 0.4138331f;
      sa[126] = 0.533567f;
      sa[127] = 0.43551514f;
    }
  }
}
// Neuron weights connecting Rectifier and Rectifier layer
class Eight_Weight_2 implements java.io.Serializable {
  public static final float[] VALUES = new float[256];
  static {
    Eight_Weight_2_0.fill(VALUES);
  }
  static final class Eight_Weight_2_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = -0.06679277f;
      sa[1] = -0.1645194f;
      sa[2] = -0.30036473f;
      sa[3] = 0.07110119f;
      sa[4] = 0.14536288f;
      sa[5] = 0.7978896f;
      sa[6] = -0.37737632f;
      sa[7] = -0.050465547f;
      sa[8] = 0.18154834f;
      sa[9] = 0.2573007f;
      sa[10] = 0.14161044f;
      sa[11] = 0.2579091f;
      sa[12] = -0.76154196f;
      sa[13] = 0.08806704f;
      sa[14] = -0.7756753f;
      sa[15] = -0.1347351f;
      sa[16] = 0.012699293f;
      sa[17] = -0.14293489f;
      sa[18] = 0.33343777f;
      sa[19] = 0.49992216f;
      sa[20] = -0.59943664f;
      sa[21] = -0.013944339f;
      sa[22] = 0.5817411f;
      sa[23] = 1.2022573f;
      sa[24] = -0.5657654f;
      sa[25] = 0.048605468f;
      sa[26] = -1.3284467f;
      sa[27] = 0.3585065f;
      sa[28] = -0.6488936f;
      sa[29] = -0.9985463f;
      sa[30] = -0.5414097f;
      sa[31] = -0.15393782f;
      sa[32] = 0.37777314f;
      sa[33] = -0.27738208f;
      sa[34] = 0.8735575f;
      sa[35] = -0.576847f;
      sa[36] = -0.17429955f;
      sa[37] = 0.4917719f;
      sa[38] = 1.1642934f;
      sa[39] = 0.6340128f;
      sa[40] = -0.0032646994f;
      sa[41] = 0.060185373f;
      sa[42] = -0.13712424f;
      sa[43] = 0.6908314f;
      sa[44] = 0.30838865f;
      sa[45] = 0.031048337f;
      sa[46] = -0.98445314f;
      sa[47] = -0.22386248f;
      sa[48] = -0.83936733f;
      sa[49] = -0.10364569f;
      sa[50] = -0.19195719f;
      sa[51] = 0.09182088f;
      sa[52] = 0.9631231f;
      sa[53] = 0.24009685f;
      sa[54] = -0.4248073f;
      sa[55] = 0.08905554f;
      sa[56] = 0.5103974f;
      sa[57] = 0.3612228f;
      sa[58] = -0.30829212f;
      sa[59] = 0.17529492f;
      sa[60] = -0.31719974f;
      sa[61] = 0.16054238f;
      sa[62] = -0.71284544f;
      sa[63] = -0.14704323f;
      sa[64] = -0.098146565f;
      sa[65] = 0.45879608f;
      sa[66] = 0.78500104f;
      sa[67] = -0.17019135f;
      sa[68] = 0.0647002f;
      sa[69] = 0.24336988f;
      sa[70] = -0.653038f;
      sa[71] = 0.4982962f;
      sa[72] = 0.45832235f;
      sa[73] = 0.053060792f;
      sa[74] = 0.08013451f;
      sa[75] = -0.1522475f;
      sa[76] = -0.3107127f;
      sa[77] = -0.09346384f;
      sa[78] = -0.8498368f;
      sa[79] = -0.9682853f;
      sa[80] = 0.0283208f;
      sa[81] = -0.10575854f;
      sa[82] = 0.24573635f;
      sa[83] = -0.36521012f;
      sa[84] = 0.15036955f;
      sa[85] = 0.5126702f;
      sa[86] = 0.013571f;
      sa[87] = -0.12498504f;
      sa[88] = 0.5212626f;
      sa[89] = -0.07786694f;
      sa[90] = -0.42612472f;
      sa[91] = 0.5330507f;
      sa[92] = -0.15890376f;
      sa[93] = -0.48094517f;
      sa[94] = -1.1478544f;
      sa[95] = -0.8073808f;
      sa[96] = -0.21236405f;
      sa[97] = 0.21909177f;
      sa[98] = -0.60581183f;
      sa[99] = -0.23017494f;
      sa[100] = -0.12802987f;
      sa[101] = 0.6760746f;
      sa[102] = 0.31978408f;
      sa[103] = 0.17850888f;
      sa[104] = 0.5608054f;
      sa[105] = 0.24938944f;
      sa[106] = -0.079146884f;
      sa[107] = -0.20255527f;
      sa[108] = 0.19805345f;
      sa[109] = 0.47953653f;
      sa[110] = 0.8823439f;
      sa[111] = 0.34897575f;
      sa[112] = -0.31118488f;
      sa[113] = -0.08655617f;
      sa[114] = -0.094518654f;
      sa[115] = 0.34567976f;
      sa[116] = 0.5056557f;
      sa[117] = 0.21119064f;
      sa[118] = -0.12552817f;
      sa[119] = -0.54964423f;
      sa[120] = -0.5673499f;
      sa[121] = -0.19983713f;
      sa[122] = -0.19585866f;
      sa[123] = -0.7638836f;
      sa[124] = 0.16943072f;
      sa[125] = 0.19752444f;
      sa[126] = -0.11016956f;
      sa[127] = -0.36071143f;
      sa[128] = 0.25491193f;
      sa[129] = -1.0507137f;
      sa[130] = -0.04610246f;
      sa[131] = 0.39847228f;
      sa[132] = 0.19978967f;
      sa[133] = -1.1502023f;
      sa[134] = -0.6162366f;
      sa[135] = 0.06680923f;
      sa[136] = -0.02517891f;
      sa[137] = -0.58512086f;
      sa[138] = 0.51179546f;
      sa[139] = 0.084351666f;
      sa[140] = 0.5013096f;
      sa[141] = -0.37813836f;
      sa[142] = 0.65669924f;
      sa[143] = 0.9649066f;
      sa[144] = 0.15855658f;
      sa[145] = -0.2373784f;
      sa[146] = -0.7569933f;
      sa[147] = 0.27642015f;
      sa[148] = -0.0707993f;
      sa[149] = -0.006821598f;
      sa[150] = -0.372538f;
      sa[151] = 1.0453025f;
      sa[152] = -0.052182544f;
      sa[153] = -0.054012522f;
      sa[154] = 0.29429808f;
      sa[155] = 0.46566626f;
      sa[156] = 0.7698476f;
      sa[157] = -0.83977485f;
      sa[158] = 0.018774394f;
      sa[159] = 0.3011359f;
      sa[160] = 0.65379775f;
      sa[161] = 0.3398092f;
      sa[162] = 0.18154609f;
      sa[163] = 0.3105143f;
      sa[164] = -0.60955167f;
      sa[165] = 0.31923056f;
      sa[166] = -0.1343524f;
      sa[167] = 0.7181035f;
      sa[168] = -0.11873692f;
      sa[169] = -0.05804172f;
      sa[170] = 0.051552612f;
      sa[171] = 0.33180064f;
      sa[172] = 0.46459505f;
      sa[173] = -0.4388143f;
      sa[174] = 0.5702002f;
      sa[175] = 0.49771184f;
      sa[176] = 0.850562f;
      sa[177] = -0.14533706f;
      sa[178] = 0.68290657f;
      sa[179] = 0.6360443f;
      sa[180] = 0.016599191f;
      sa[181] = -0.26323387f;
      sa[182] = -0.5494127f;
      sa[183] = 1.0225787f;
      sa[184] = -0.027447645f;
      sa[185] = 0.022378536f;
      sa[186] = 0.8366409f;
      sa[187] = -0.073960714f;
      sa[188] = -0.36237678f;
      sa[189] = 0.14381957f;
      sa[190] = -1.0525229f;
      sa[191] = 0.63709784f;
      sa[192] = -1.06765f;
      sa[193] = -0.17581849f;
      sa[194] = -0.07987343f;
      sa[195] = 0.09130835f;
      sa[196] = -0.5631067f;
      sa[197] = 0.42108738f;
      sa[198] = -0.20376326f;
      sa[199] = 0.25829616f;
      sa[200] = 0.38581005f;
      sa[201] = 0.20517686f;
      sa[202] = -0.48968667f;
      sa[203] = 0.3855472f;
      sa[204] = -0.51583385f;
      sa[205] = -0.0041330964f;
      sa[206] = -0.07310331f;
      sa[207] = 0.30512354f;
      sa[208] = -0.47211084f;
      sa[209] = 0.15078688f;
      sa[210] = 0.23431332f;
      sa[211] = 0.23684777f;
      sa[212] = 0.3877843f;
      sa[213] = -0.19869459f;
      sa[214] = 0.19843622f;
      sa[215] = -0.82794076f;
      sa[216] = 0.28276002f;
      sa[217] = 0.56697583f;
      sa[218] = -0.43593776f;
      sa[219] = 0.023438219f;
      sa[220] = -0.32228276f;
      sa[221] = 0.66636753f;
      sa[222] = -0.4313502f;
      sa[223] = -0.18659961f;
      sa[224] = 0.86824036f;
      sa[225] = -0.34100744f;
      sa[226] = 0.04783411f;
      sa[227] = -0.4169185f;
      sa[228] = -0.45821327f;
      sa[229] = 0.30197877f;
      sa[230] = 0.018171582f;
      sa[231] = -0.39187717f;
      sa[232] = 0.5297852f;
      sa[233] = -0.7437753f;
      sa[234] = -0.124289095f;
      sa[235] = -0.96794516f;
      sa[236] = -1.0662079f;
      sa[237] = 0.28929707f;
      sa[238] = 0.21611515f;
      sa[239] = 0.53805864f;
      sa[240] = -0.28711873f;
      sa[241] = 0.2815596f;
      sa[242] = -0.14821635f;
      sa[243] = -0.19241221f;
      sa[244] = 0.051899467f;
      sa[245] = 0.13247222f;
      sa[246] = -0.4159424f;
      sa[247] = -0.46838722f;
      sa[248] = -0.37574297f;
      sa[249] = 0.47805676f;
      sa[250] = 0.057792254f;
      sa[251] = -0.628973f;
      sa[252] = 0.2925373f;
      sa[253] = 0.6547263f;
      sa[254] = 0.3797358f;
      sa[255] = 0.06631834f;
    }
  }
}
// Neuron weights connecting Rectifier and Softmax layer
class Eight_Weight_3 implements java.io.Serializable {
  public static final float[] VALUES = new float[80];
  static {
    Eight_Weight_3_0.fill(VALUES);
  }
  static final class Eight_Weight_3_0 implements java.io.Serializable {
    static final void fill(float[] sa) {
      sa[0] = 0.6300596f;
      sa[1] = -1.1239299f;
      sa[2] = 1.0363381f;
      sa[3] = -2.1369746f;
      sa[4] = -0.77967304f;
      sa[5] = -0.12904721f;
      sa[6] = -1.9544433f;
      sa[7] = 2.9452014f;
      sa[8] = 2.2955205f;
      sa[9] = 0.26022986f;
      sa[10] = 1.2151656f;
      sa[11] = 2.1889102f;
      sa[12] = -2.3745437f;
      sa[13] = 0.07869102f;
      sa[14] = 0.030537756f;
      sa[15] = -0.13485062f;
      sa[16] = 1.1360027f;
      sa[17] = -1.6844188f;
      sa[18] = 2.388323f;
      sa[19] = -1.0281205f;
      sa[20] = -2.6724904f;
      sa[21] = -0.9508645f;
      sa[22] = 2.3752427f;
      sa[23] = 2.8387992f;
      sa[24] = -3.8909802f;
      sa[25] = -1.9184191f;
      sa[26] = -0.19368131f;
      sa[27] = -2.6462173f;
      sa[28] = -1.1426564f;
      sa[29] = 1.0656767f;
      sa[30] = -2.8751183f;
      sa[31] = 1.5496981f;
      sa[32] = -0.017856339f;
      sa[33] = 0.71723276f;
      sa[34] = 2.8468015f;
      sa[35] = -2.870125f;
      sa[36] = -0.5651708f;
      sa[37] = -0.18742037f;
      sa[38] = 1.5837206f;
      sa[39] = -2.0845187f;
      sa[40] = -0.29380074f;
      sa[41] = -0.46513242f;
      sa[42] = 1.5686651f;
      sa[43] = 0.7119577f;
      sa[44] = -1.7340685f;
      sa[45] = -0.5272328f;
      sa[46] = -3.1636488f;
      sa[47] = -4.73118f;
      sa[48] = 1.8838747f;
      sa[49] = 1.0002408f;
      sa[50] = 1.2817917f;
      sa[51] = -0.3153709f;
      sa[52] = 0.66981494f;
      sa[53] = 1.1180893f;
      sa[54] = -0.3173337f;
      sa[55] = -4.2119665f;
      sa[56] = -0.74178517f;
      sa[57] = -2.028149f;
      sa[58] = -1.049254f;
      sa[59] = 0.8094239f;
      sa[60] = 0.44658372f;
      sa[61] = 1.1377329f;
      sa[62] = 2.0821877f;
      sa[63] = 0.30353948f;
      sa[64] = 1.5381093f;
      sa[65] = -0.35062256f;
      sa[66] = -2.0095034f;
      sa[67] = -1.3441715f;
      sa[68] = 1.7817702f;
      sa[69] = -0.22410055f;
      sa[70] = 2.261427f;
      sa[71] = 1.7485111f;
      sa[72] = -2.4572163f;
      sa[73] = 0.26348016f;
      sa[74] = 2.8772438f;
      sa[75] = 0.7586736f;
      sa[76] = 3.3311694f;
      sa[77] = -1.7799441f;
      sa[78] = -1.1521538f;
      sa[79] = 0.19822258f;
    }
  }
}
// The class representing training column names
class NamesHolder_Eight implements java.io.Serializable {
  public static final String[] VALUES = new String[8];
  static {
    NamesHolder_Eight_0.fill(VALUES);
  }
  static final class NamesHolder_Eight_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "RSSI LEFT_ORIGIN";
      sa[1] = "RSSI MIDDLE_ORIGIN";
      sa[2] = "RSSI RIGHT_ORIGIN";
      sa[3] = "RSSI TRUNK_ORIGIN";
      sa[4] = "RSSI FRONTLEFT_ORIGIN";
      sa[5] = "RSSI FRONTRIGHT_ORIGIN";
      sa[6] = "RSSI REARLEFT_ORIGIN";
      sa[7] = "RSSI REARRIGHT_ORIGIN";
    }
  }
}
// The class representing column class
class Eight_ColInfo_8 implements java.io.Serializable {
  public static final String[] VALUES = new String[5];
  static {
    Eight_ColInfo_8_0.fill(VALUES);
  }
  static final class Eight_ColInfo_8_0 implements java.io.Serializable {
    static final void fill(String[] sa) {
      sa[0] = "back";
      sa[1] = "front";
      sa[2] = "left";
      sa[3] = "lock";
      sa[4] = "right";
    }
  }
}

