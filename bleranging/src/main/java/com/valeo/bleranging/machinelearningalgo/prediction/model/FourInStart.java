/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-05-19T16:12:56.818+02:00
  3.10.4.2
  
  Standalone prediction code with sample test data for DeepLearningModel named FourInStart

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/FourInStart > FourInStart.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m FourInStart.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/

import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name = "FourInStart", algorithm = "deeplearning")
public class FourInStart extends GenModel {
    // Workspace for categorical offsets.
    public static final int[] CATOFFSETS = {0};
    // Number of neurons for each layer.
    public static final int[] NEURONS = {4, 16, 16, 2};
    // Neuron bias values.
    public static final double[][] BIAS = new double[][]{
      /* Input */ FourInStart_Bias_0.VALUES,
      /* Rectifier */ FourInStart_Bias_1.VALUES,
      /* Rectifier */ FourInStart_Bias_2.VALUES,
      /* Softmax */ FourInStart_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][]{
      /* Input */ FourInStart_Weight_0.VALUES,
      /* Rectifier */ FourInStart_Weight_1.VALUES,
      /* Rectifier */ FourInStart_Weight_2.VALUES,
      /* Softmax */ FourInStart_Weight_3.VALUES
    };
    // Names of columns used by model.
    public static final String[] NAMES = NamesHolder_FourInStart.VALUES;
    // Number of output classes included in training data response column.
    public static final int NCLASSES = 2;
    // Column domains. The last array contains domain of response column.
    public static final String[][] DOMAINS = new String[][]{
    /* RSSI LEFT_ORIGIN */ null,
    /* RSSI MIDDLE_ORIGIN */ null,
    /* RSSI RIGHT_ORIGIN */ null,
    /* RSSI TRUNK_ORIGIN */ null,
    /* class */ FourInStart_ColInfo_4.VALUES
    };
    // Prior class distribution
    public static final double[] PRIOR_CLASS_DISTRIB = {0.42857142857142855, 0.5714285714285714};
    // Class distribution used for model building
    public static final double[] MODEL_CLASS_DISTRIB = null;
    // Thread-local storage for input neuron activation values.
    final double[] NUMS = new double[4];
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][]{
      /* Input */ FourInStart_Activation_0.VALUES,
      /* Rectifier */ FourInStart_Activation_1.VALUES,
      /* Rectifier */ FourInStart_Activation_2.VALUES,
      /* Softmax */ FourInStart_Activation_3.VALUES
    };

    public FourInStart() {
        super(NAMES, DOMAINS);
    }

    public hex.ModelCategory getModelCategory() {
        return hex.ModelCategory.Binomial;
    }

    public boolean isSupervised() {
        return true;
    }

    public int nfeatures() {
        return 4;
    }

    public int nclasses() {
        return 2;
    }

    public String getUUID() {
        return Long.toString(1602344040773418065L);
    }

    // Pass in data in a double[], pre-aligned to the Model's requirements.
    // Jam predictions into the preds[] array; preds[0] is reserved for the
    // main prediction (class for classifiers or value for regression),
    // and remaining columns hold a probability distribution for classifiers.
    public final double[] score0(double[] data, double[] preds) {
        java.util.Arrays.fill(preds, 0);
        java.util.Arrays.fill(NUMS, 0);
        int i = 0, ncats = 0;
        final int n = data.length;
        for (; i < n; ++i) {
            NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i]) * NORMMUL.VALUES[i];
        }
        java.util.Arrays.fill(ACTIVATION[0], 0);
        for (i = 0; i < NUMS.length; ++i) {
            ACTIVATION[0][CATOFFSETS[CATOFFSETS.length - 1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
        }
        for (i = 1; i < ACTIVATION.length; ++i) {
            java.util.Arrays.fill(ACTIVATION[i], 0);
            int cols = ACTIVATION[i - 1].length;
            int rows = ACTIVATION[i].length;
            int extra = cols - cols % 8;
            int multiple = (cols / 8) * 8 - 1;
            int idx = 0;
            float[] a = WEIGHT[i];
            double[] x = ACTIVATION[i - 1];
            double[] y = BIAS[i];
            double[] res = ACTIVATION[i];
            for (int row = 0; row < rows; ++row) {
                double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
                for (int col = 0; col < multiple; col += 8) {
                    int off = idx + col;
                    psum0 += a[off] * x[col];
                    psum1 += a[off + 1] * x[col + 1];
                    psum2 += a[off + 2] * x[col + 2];
                    psum3 += a[off + 3] * x[col + 3];
                    psum4 += a[off + 4] * x[col + 4];
                    psum5 += a[off + 5] * x[col + 5];
                    psum6 += a[off + 6] * x[col + 6];
                    psum7 += a[off + 7] * x[col + 7];
                }
                res[row] += psum0 + psum1 + psum2 + psum3;
                res[row] += psum4 + psum5 + psum6 + psum7;
                for (int col = extra; col < cols; col++)
                    res[row] += a[idx + col] * x[col];
                res[row] += y[row];
                idx += cols;
            }
            if (i < ACTIVATION.length - 1) {
                for (int r = 0; r < ACTIVATION[i].length; ++r) {
                    ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
                }
            }
            if (i == ACTIVATION.length - 1) {
                double max = ACTIVATION[i][0];
                for (int r = 1; r < ACTIVATION[i].length; r++) {
                    if (ACTIVATION[i][r] > max) max = ACTIVATION[i][r];
                }
                double scale = 0;
                for (int r = 0; r < ACTIVATION[i].length; r++) {
                    ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
                    scale += ACTIVATION[i][r];
                }
                for (int r = 0; r < ACTIVATION[i].length; r++) {
                    if (Double.isNaN(ACTIVATION[i][r]))
                        throw new RuntimeException("Numerical instability, predicted NaN.");
                    ACTIVATION[i][r] /= scale;
                    preds[r + 1] = ACTIVATION[i][r];
                }
            }
        }
        preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.680677284771897);
        return preds;
    }

    static class NORMMUL implements java.io.Serializable {
        public static final double[] VALUES = new double[4];

        static {
            NORMMUL_0.fill(VALUES);
        }

        static final class NORMMUL_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.10773013257791943;
                sa[1] = 0.09906593137301133;
                sa[2] = 0.09826676185218625;
                sa[3] = 0.08769229784821761;
            }
        }
    }

    static class NORMSUB implements java.io.Serializable {
        public static final double[] VALUES = new double[4];

        static {
            NORMSUB_0.fill(VALUES);
        }

        static final class NORMSUB_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = -69.23450892857143;
                sa[1] = -73.46553571428572;
                sa[2] = -69.43236607142858;
                sa[3] = -71.65986607142855;
            }
        }
    }

    // Neuron activation values for Input layer
    static class FourInStart_Activation_0 implements java.io.Serializable {
        public static final double[] VALUES = new double[4];

        static {
            FourInStart_Activation_0_0.fill(VALUES);
        }

        static final class FourInStart_Activation_0_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
            }
        }
    }

    // Neuron activation values for Rectifier layer
    static class FourInStart_Activation_1 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            FourInStart_Activation_1_0.fill(VALUES);
        }

        static final class FourInStart_Activation_1_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
                sa[7] = 0.0;
                sa[8] = 0.0;
                sa[9] = 0.0;
                sa[10] = 0.0;
                sa[11] = 0.0;
                sa[12] = 0.0;
                sa[13] = 0.0;
                sa[14] = 0.0;
                sa[15] = 0.0;
            }
        }
    }

    // Neuron activation values for Rectifier layer
    static class FourInStart_Activation_2 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            FourInStart_Activation_2_0.fill(VALUES);
        }

        static final class FourInStart_Activation_2_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
                sa[7] = 0.0;
                sa[8] = 0.0;
                sa[9] = 0.0;
                sa[10] = 0.0;
                sa[11] = 0.0;
                sa[12] = 0.0;
                sa[13] = 0.0;
                sa[14] = 0.0;
                sa[15] = 0.0;
            }
        }
    }

    // Neuron activation values for Softmax layer
    static class FourInStart_Activation_3 implements java.io.Serializable {
        public static final double[] VALUES = new double[2];

        static {
            FourInStart_Activation_3_0.fill(VALUES);
        }

        static final class FourInStart_Activation_3_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
            }
        }
    }

    // Neuron bias values for Input layer
    static class FourInStart_Bias_0 implements java.io.Serializable {
        public static final double[] VALUES = null;
    }

    // Neuron bias values for Rectifier layer
    static class FourInStart_Bias_1 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            FourInStart_Bias_1_0.fill(VALUES);
        }

        static final class FourInStart_Bias_1_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.19704218128258366;
                sa[1] = 0.45502357286723505;
                sa[2] = 0.33383701523713916;
                sa[3] = 0.3199114868549712;
                sa[4] = 0.8048517921231525;
                sa[5] = 0.7229737092188396;
                sa[6] = 0.3544736741018994;
                sa[7] = 0.1615938908005717;
                sa[8] = 0.834730781861232;
                sa[9] = -0.2567179445577531;
                sa[10] = 0.34612369098986157;
                sa[11] = 0.51103201902156;
                sa[12] = 0.4114394809974891;
                sa[13] = 0.46248369168885806;
                sa[14] = 0.7678984433186987;
                sa[15] = -0.05396512973841865;
            }
        }
    }

    // Neuron bias values for Rectifier layer
    static class FourInStart_Bias_2 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            FourInStart_Bias_2_0.fill(VALUES);
        }

        static final class FourInStart_Bias_2_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.5636476807362639;
                sa[1] = 0.5587991377978251;
                sa[2] = 1.2913420325184204;
                sa[3] = 1.8476484539740565;
                sa[4] = 1.064093770902773;
                sa[5] = 0.5228580351432726;
                sa[6] = 0.6082653955266764;
                sa[7] = 0.6360322182844595;
                sa[8] = 0.5165043015472544;
                sa[9] = 0.4985022415384829;
                sa[10] = 1.8566108552872516;
                sa[11] = 0.7530389549233946;
                sa[12] = 0.4752730133080604;
                sa[13] = 0.9329666651922918;
                sa[14] = 0.6228059922252792;
                sa[15] = 0.7146666429846694;
            }
        }
    }

    // Neuron bias values for Softmax layer
    static class FourInStart_Bias_3 implements java.io.Serializable {
        public static final double[] VALUES = new double[2];

        static {
            FourInStart_Bias_3_0.fill(VALUES);
        }

        static final class FourInStart_Bias_3_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.354574483715604;
                sa[1] = -0.07334894695194827;
            }
        }
    }

    static class FourInStart_Weight_0 implements java.io.Serializable {
        public static final float[] VALUES = null;
    }

    // Neuron weights connecting Input and Rectifier layer
    static class FourInStart_Weight_1 implements java.io.Serializable {
        public static final float[] VALUES = new float[64];

        static {
            FourInStart_Weight_1_0.fill(VALUES);
        }

        static final class FourInStart_Weight_1_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = -0.057112787f;
                sa[1] = 0.3195406f;
                sa[2] = -0.8843482f;
                sa[3] = 0.29889107f;
                sa[4] = -0.1476153f;
                sa[5] = -0.21771803f;
                sa[6] = -0.87484694f;
                sa[7] = 0.09276287f;
                sa[8] = 0.04700107f;
                sa[9] = 0.4798898f;
                sa[10] = -0.6716476f;
                sa[11] = 0.81622f;
                sa[12] = -0.25111505f;
                sa[13] = -0.19716641f;
                sa[14] = -0.27872822f;
                sa[15] = -0.19012406f;
                sa[16] = 0.4565348f;
                sa[17] = -0.18763366f;
                sa[18] = -0.15617943f;
                sa[19] = 0.537625f;
                sa[20] = -0.21090853f;
                sa[21] = 0.24868181f;
                sa[22] = 0.65963334f;
                sa[23] = 0.11742354f;
                sa[24] = 0.22995135f;
                sa[25] = 0.07284027f;
                sa[26] = 0.38229403f;
                sa[27] = 0.4562415f;
                sa[28] = -0.09716437f;
                sa[29] = -0.1605595f;
                sa[30] = -0.09603018f;
                sa[31] = 0.015999695f;
                sa[32] = 0.56523293f;
                sa[33] = 0.41988894f;
                sa[34] = 0.031464778f;
                sa[35] = 0.23010327f;
                sa[36] = -0.22295304f;
                sa[37] = -0.5290216f;
                sa[38] = 0.12742968f;
                sa[39] = 0.7003821f;
                sa[40] = -0.015759215f;
                sa[41] = -0.18085773f;
                sa[42] = -0.2693486f;
                sa[43] = 0.017021557f;
                sa[44] = 0.14448416f;
                sa[45] = 0.23892629f;
                sa[46] = 0.7561001f;
                sa[47] = -0.5635819f;
                sa[48] = -0.26078394f;
                sa[49] = 0.5188241f;
                sa[50] = 0.5857565f;
                sa[51] = -0.3745852f;
                sa[52] = -0.17679314f;
                sa[53] = -0.13051473f;
                sa[54] = -0.009680939f;
                sa[55] = -0.2004814f;
                sa[56] = 0.3527097f;
                sa[57] = 0.15206322f;
                sa[58] = 0.5619456f;
                sa[59] = -0.12617493f;
                sa[60] = 0.2937952f;
                sa[61] = -0.6021967f;
                sa[62] = 0.15446813f;
                sa[63] = 0.76154274f;
            }
        }
    }

    // Neuron weights connecting Rectifier and Rectifier layer
    static class FourInStart_Weight_2 implements java.io.Serializable {
        public static final float[] VALUES = new float[256];

        static {
            FourInStart_Weight_2_0.fill(VALUES);
        }

        static final class FourInStart_Weight_2_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = -0.16412076f;
                sa[1] = 0.15786129f;
                sa[2] = -0.25488907f;
                sa[3] = 0.6640098f;
                sa[4] = -0.09434774f;
                sa[5] = -0.18673024f;
                sa[6] = 0.4537347f;
                sa[7] = -0.010404999f;
                sa[8] = 0.23509242f;
                sa[9] = -0.54426926f;
                sa[10] = 0.50369036f;
                sa[11] = -0.2875839f;
                sa[12] = -0.40142882f;
                sa[13] = 0.77169645f;
                sa[14] = 0.27210277f;
                sa[15] = -0.69966626f;
                sa[16] = -0.19493209f;
                sa[17] = 0.21805377f;
                sa[18] = -0.5526172f;
                sa[19] = 1.1088717f;
                sa[20] = -0.28278723f;
                sa[21] = 0.3903899f;
                sa[22] = 0.3844501f;
                sa[23] = 0.6192972f;
                sa[24] = 0.30896908f;
                sa[25] = -0.65339714f;
                sa[26] = 0.29129466f;
                sa[27] = -0.4442577f;
                sa[28] = -0.46640274f;
                sa[29] = 0.20423412f;
                sa[30] = -0.019288493f;
                sa[31] = -0.39318246f;
                sa[32] = -0.6023011f;
                sa[33] = -0.2293083f;
                sa[34] = 0.40074065f;
                sa[35] = 1.0812355f;
                sa[36] = -0.35681292f;
                sa[37] = -0.5186328f;
                sa[38] = -0.26965392f;
                sa[39] = 0.044882603f;
                sa[40] = -0.52423906f;
                sa[41] = 0.20565557f;
                sa[42] = 0.3612141f;
                sa[43] = 0.28477645f;
                sa[44] = 0.08648095f;
                sa[45] = 0.06623468f;
                sa[46] = -0.15500757f;
                sa[47] = 0.22651792f;
                sa[48] = 0.8136135f;
                sa[49] = 0.47563958f;
                sa[50] = 0.88324463f;
                sa[51] = -0.8740917f;
                sa[52] = 0.70470333f;
                sa[53] = 0.2065095f;
                sa[54] = -0.28033662f;
                sa[55] = 0.3040755f;
                sa[56] = -0.016269045f;
                sa[57] = 0.6331417f;
                sa[58] = -0.1345627f;
                sa[59] = 0.45128065f;
                sa[60] = 0.6101968f;
                sa[61] = -0.107953966f;
                sa[62] = 0.6853384f;
                sa[63] = 0.5294296f;
                sa[64] = -0.56525666f;
                sa[65] = -0.6086191f;
                sa[66] = 0.22897448f;
                sa[67] = 0.59439415f;
                sa[68] = -0.27619666f;
                sa[69] = -0.010785776f;
                sa[70] = -0.17359245f;
                sa[71] = 0.66646224f;
                sa[72] = 0.11105431f;
                sa[73] = -0.04306388f;
                sa[74] = -0.008860549f;
                sa[75] = -0.20845929f;
                sa[76] = -0.41910517f;
                sa[77] = 0.34245935f;
                sa[78] = -0.20717709f;
                sa[79] = -0.19030702f;
                sa[80] = -0.19517879f;
                sa[81] = -0.101502925f;
                sa[82] = -0.44135386f;
                sa[83] = 1.1750544f;
                sa[84] = 0.09838286f;
                sa[85] = -0.18229154f;
                sa[86] = 0.793271f;
                sa[87] = 0.023920892f;
                sa[88] = 0.25787798f;
                sa[89] = -0.4901412f;
                sa[90] = 0.07871681f;
                sa[91] = -0.03689785f;
                sa[92] = -0.33711204f;
                sa[93] = 0.12810247f;
                sa[94] = -0.29826877f;
                sa[95] = -0.58889f;
                sa[96] = -0.28720593f;
                sa[97] = -0.03615407f;
                sa[98] = 0.043002352f;
                sa[99] = 1.0523285f;
                sa[100] = 0.4449171f;
                sa[101] = 9.5368817E-4f;
                sa[102] = 0.21906197f;
                sa[103] = 0.47605678f;
                sa[104] = -0.052300442f;
                sa[105] = -0.8623459f;
                sa[106] = 0.104853205f;
                sa[107] = -0.027607802f;
                sa[108] = -0.034340154f;
                sa[109] = 0.7149964f;
                sa[110] = -0.3360699f;
                sa[111] = -0.60710645f;
                sa[112] = -0.39926493f;
                sa[113] = 0.0421548f;
                sa[114] = 0.09425077f;
                sa[115] = 1.7031554f;
                sa[116] = -0.05220886f;
                sa[117] = -0.3168679f;
                sa[118] = 0.7627012f;
                sa[119] = 0.14050384f;
                sa[120] = -0.0015287326f;
                sa[121] = -0.9037024f;
                sa[122] = 0.5702354f;
                sa[123] = 0.17467457f;
                sa[124] = -0.08099301f;
                sa[125] = 0.20954977f;
                sa[126] = -0.26349142f;
                sa[127] = -0.6621722f;
                sa[128] = -0.29150113f;
                sa[129] = -0.42734703f;
                sa[130] = -0.284202f;
                sa[131] = 0.9488687f;
                sa[132] = 0.098794594f;
                sa[133] = 0.14673881f;
                sa[134] = 0.34067154f;
                sa[135] = 0.6216248f;
                sa[136] = 0.13810264f;
                sa[137] = -0.72938406f;
                sa[138] = 0.33982265f;
                sa[139] = -0.43611592f;
                sa[140] = -0.08656386f;
                sa[141] = 0.33342716f;
                sa[142] = -0.14648461f;
                sa[143] = -0.3391778f;
                sa[144] = -0.5015044f;
                sa[145] = -0.2125719f;
                sa[146] = -0.23405631f;
                sa[147] = 1.0347339f;
                sa[148] = 0.33036003f;
                sa[149] = -0.15052459f;
                sa[150] = 0.4055711f;
                sa[151] = 0.25389996f;
                sa[152] = -0.037907273f;
                sa[153] = -0.5151235f;
                sa[154] = 0.677089f;
                sa[155] = -0.60086614f;
                sa[156] = -0.07245778f;
                sa[157] = 0.12352591f;
                sa[158] = 0.3836977f;
                sa[159] = -0.6630229f;
                sa[160] = 0.53546906f;
                sa[161] = 0.14932814f;
                sa[162] = 0.23973182f;
                sa[163] = -0.87910706f;
                sa[164] = 0.028629633f;
                sa[165] = 0.3286175f;
                sa[166] = 0.14419675f;
                sa[167] = -0.35864446f;
                sa[168] = 0.53202325f;
                sa[169] = 1.1005077f;
                sa[170] = 0.1672478f;
                sa[171] = 0.15197508f;
                sa[172] = 0.44743f;
                sa[173] = -0.53026223f;
                sa[174] = 0.6420554f;
                sa[175] = 0.95027447f;
                sa[176] = 0.32451287f;
                sa[177] = -0.3160012f;
                sa[178] = -0.4503106f;
                sa[179] = 0.8567916f;
                sa[180] = -0.12134855f;
                sa[181] = 0.14737444f;
                sa[182] = 0.61705846f;
                sa[183] = 0.082588516f;
                sa[184] = -0.07593087f;
                sa[185] = -0.79271245f;
                sa[186] = 0.2786389f;
                sa[187] = -0.51711816f;
                sa[188] = -0.3298393f;
                sa[189] = 0.52461314f;
                sa[190] = 0.1510739f;
                sa[191] = -0.47805166f;
                sa[192] = 0.01094904f;
                sa[193] = 0.03176031f;
                sa[194] = -0.021106403f;
                sa[195] = 0.9041598f;
                sa[196] = -0.039426f;
                sa[197] = 0.1286123f;
                sa[198] = 0.60568506f;
                sa[199] = 0.5966608f;
                sa[200] = 0.1975529f;
                sa[201] = -0.59741443f;
                sa[202] = 0.63192815f;
                sa[203] = -0.43760493f;
                sa[204] = -0.19140923f;
                sa[205] = 0.39769548f;
                sa[206] = -0.4294695f;
                sa[207] = -0.68273777f;
                sa[208] = 0.40875313f;
                sa[209] = -0.18693908f;
                sa[210] = 0.030375611f;
                sa[211] = 1.4329242f;
                sa[212] = -0.3764174f;
                sa[213] = -0.14119571f;
                sa[214] = 0.0600547f;
                sa[215] = 0.5154417f;
                sa[216] = -0.43233f;
                sa[217] = -0.017265586f;
                sa[218] = 0.64826155f;
                sa[219] = -0.28838083f;
                sa[220] = -0.31759486f;
                sa[221] = 0.25878295f;
                sa[222] = 0.22101526f;
                sa[223] = -0.32132825f;
                sa[224] = -0.06105389f;
                sa[225] = -0.21350095f;
                sa[226] = -0.46264315f;
                sa[227] = 1.3825626f;
                sa[228] = 0.16170901f;
                sa[229] = 0.24986653f;
                sa[230] = 0.183546f;
                sa[231] = 0.5033064f;
                sa[232] = -0.1298396f;
                sa[233] = -0.64392364f;
                sa[234] = 0.683069f;
                sa[235] = -0.58083427f;
                sa[236] = 0.14603405f;
                sa[237] = 0.5378177f;
                sa[238] = 0.2787855f;
                sa[239] = -0.47122484f;
                sa[240] = -0.51817083f;
                sa[241] = -0.61345047f;
                sa[242] = 0.24196857f;
                sa[243] = 1.2653002f;
                sa[244] = -0.017650926f;
                sa[245] = 0.06414713f;
                sa[246] = -0.25458956f;
                sa[247] = 0.21878998f;
                sa[248] = 0.10319908f;
                sa[249] = -0.72966343f;
                sa[250] = 0.11928225f;
                sa[251] = 0.033046037f;
                sa[252] = -0.4515447f;
                sa[253] = 0.53067064f;
                sa[254] = -0.31285673f;
                sa[255] = 0.16152975f;
            }
        }
    }

    // Neuron weights connecting Rectifier and Softmax layer
    static class FourInStart_Weight_3 implements java.io.Serializable {
        public static final float[] VALUES = new float[32];

        static {
            FourInStart_Weight_3_0.fill(VALUES);
        }

        static final class FourInStart_Weight_3_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = -1.8087612f;
                sa[1] = -2.6769729f;
                sa[2] = -1.1860331f;
                sa[3] = 2.562033f;
                sa[4] = -2.8742113f;
                sa[5] = -1.4678227f;
                sa[6] = -2.1910708f;
                sa[7] = -2.0289245f;
                sa[8] = -0.13040413f;
                sa[9] = -0.047571953f;
                sa[10] = 1.0784936f;
                sa[11] = -2.376455f;
                sa[12] = -1.9196994f;
                sa[13] = -1.555467f;
                sa[14] = -2.0178113f;
                sa[15] = 0.17680755f;
                sa[16] = -0.4584179f;
                sa[17] = 0.7679459f;
                sa[18] = 1.5734776f;
                sa[19] = 1.1512835f;
                sa[20] = 0.5581586f;
                sa[21] = 1.7897768f;
                sa[22] = 0.5580963f;
                sa[23] = -0.3590624f;
                sa[24] = 2.0915058f;
                sa[25] = 1.9759456f;
                sa[26] = -0.33536336f;
                sa[27] = 0.6482578f;
                sa[28] = -1.2744159f;
                sa[29] = -0.14887734f;
                sa[30] = 0.6273392f;
                sa[31] = 2.31938f;
            }
        }
    }

    // The class representing training column names
    static class NamesHolder_FourInStart implements java.io.Serializable {
        public static final String[] VALUES = new String[4];

        static {
            NamesHolder_FourInStart_0.fill(VALUES);
        }

        static final class NamesHolder_FourInStart_0 implements java.io.Serializable {
            static final void fill(String[] sa) {
                sa[0] = "RSSI LEFT_ORIGIN";
                sa[1] = "RSSI MIDDLE_ORIGIN";
                sa[2] = "RSSI RIGHT_ORIGIN";
                sa[3] = "RSSI TRUNK_ORIGIN";
            }
        }
    }

    // The class representing column class
    static class FourInStart_ColInfo_4 implements java.io.Serializable {
        public static final String[] VALUES = new String[2];

        static {
            FourInStart_ColInfo_4_0.fill(VALUES);
        }

        static final class FourInStart_ColInfo_4_0 implements java.io.Serializable {
            static final void fill(String[] sa) {
                sa[0] = "inside";
                sa[1] = "outside";
            }
        }
    }
}

