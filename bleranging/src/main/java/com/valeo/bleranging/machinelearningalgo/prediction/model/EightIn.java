/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2017-05-19T15:59:51.075+02:00
  3.10.4.2
  
  Standalone prediction code with sample test data for DeepLearningModel named EightIn

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://127.0.0.1:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://127.0.0.1:54321/3/Models.java/EightIn > EightIn.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m EightIn.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/

import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name = "EightIn", algorithm = "deeplearning")
public class EightIn extends GenModel {
    // Workspace for categorical offsets.
    public static final int[] CATOFFSETS = {0};
    // Number of neurons for each layer.
    public static final int[] NEURONS = {8, 16, 16, 7};
    // Neuron bias values.
    public static final double[][] BIAS = new double[][]{
      /* Input */ EightIn_Bias_0.VALUES,
      /* Rectifier */ EightIn_Bias_1.VALUES,
      /* Rectifier */ EightIn_Bias_2.VALUES,
      /* Softmax */ EightIn_Bias_3.VALUES
    };
    // Connecting weights between neurons.
    public static final float[][] WEIGHT = new float[][]{
      /* Input */ EightIn_Weight_0.VALUES,
      /* Rectifier */ EightIn_Weight_1.VALUES,
      /* Rectifier */ EightIn_Weight_2.VALUES,
      /* Softmax */ EightIn_Weight_3.VALUES
    };
    // Names of columns used by model.
    public static final String[] NAMES = NamesHolder_EightIn.VALUES;
    // Number of output classes included in training data response column.
    public static final int NCLASSES = 7;
    // Column domains. The last array contains domain of response column.
    public static final String[][] DOMAINS = new String[][]{
    /* RSSI LEFT_ORIGIN */ null,
    /* RSSI MIDDLE_ORIGIN */ null,
    /* RSSI RIGHT_ORIGIN */ null,
    /* RSSI TRUNK_ORIGIN */ null,
    /* RSSI FRONTLEFT_ORIGIN */ null,
    /* RSSI FRONTRIGHT_ORIGIN */ null,
    /* RSSI REARLEFT_ORIGIN */ null,
    /* RSSI REARRIGHT_ORIGIN */ null,
    /* class */ EightIn_ColInfo_8.VALUES
    };
    // Prior class distribution
    public static final double[] PRIOR_CLASS_DISTRIB = {0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285, 0.14285714285714285};
    // Class distribution used for model building
    public static final double[] MODEL_CLASS_DISTRIB = null;
    // Thread-local storage for input neuron activation values.
    final double[] NUMS = new double[8];
    // Thread-local storage for neuron activation values.
    final double[][] ACTIVATION = new double[][]{
      /* Input */ EightIn_Activation_0.VALUES,
      /* Rectifier */ EightIn_Activation_1.VALUES,
      /* Rectifier */ EightIn_Activation_2.VALUES,
      /* Softmax */ EightIn_Activation_3.VALUES
    };

    public EightIn() {
        super(NAMES, DOMAINS);
    }

    public hex.ModelCategory getModelCategory() {
        return hex.ModelCategory.Multinomial;
    }

    public boolean isSupervised() {
        return true;
    }

    public int nfeatures() {
        return 8;
    }

    public int nclasses() {
        return 7;
    }

    public String getUUID() {
        return Long.toString(-78031835755622904L);
    }

    // Pass in data in a double[], pre-aligned to the Model's requirements.
    // Jam predictions into the preds[] array; preds[0] is reserved for the
    // main prediction (class for classifiers or value for regression),
    // and remaining columns hold a probability distribution for classifiers.
    public final double[] score0(double[] data, double[] preds) {
        java.util.Arrays.fill(preds, 0);
        java.util.Arrays.fill(NUMS, 0);
        int i = 0, ncats = 0;
        final int n = data.length;
        for (; i < n; ++i) {
            NUMS[i] = Double.isNaN(data[i]) ? 0 : (data[i] - NORMSUB.VALUES[i]) * NORMMUL.VALUES[i];
        }
        java.util.Arrays.fill(ACTIVATION[0], 0);
        for (i = 0; i < NUMS.length; ++i) {
            ACTIVATION[0][CATOFFSETS[CATOFFSETS.length - 1] + i] = Double.isNaN(NUMS[i]) ? 0 : NUMS[i];
        }
        for (i = 1; i < ACTIVATION.length; ++i) {
            java.util.Arrays.fill(ACTIVATION[i], 0);
            int cols = ACTIVATION[i - 1].length;
            int rows = ACTIVATION[i].length;
            int extra = cols - cols % 8;
            int multiple = (cols / 8) * 8 - 1;
            int idx = 0;
            float[] a = WEIGHT[i];
            double[] x = ACTIVATION[i - 1];
            double[] y = BIAS[i];
            double[] res = ACTIVATION[i];
            for (int row = 0; row < rows; ++row) {
                double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;
                for (int col = 0; col < multiple; col += 8) {
                    int off = idx + col;
                    psum0 += a[off] * x[col];
                    psum1 += a[off + 1] * x[col + 1];
                    psum2 += a[off + 2] * x[col + 2];
                    psum3 += a[off + 3] * x[col + 3];
                    psum4 += a[off + 4] * x[col + 4];
                    psum5 += a[off + 5] * x[col + 5];
                    psum6 += a[off + 6] * x[col + 6];
                    psum7 += a[off + 7] * x[col + 7];
                }
                res[row] += psum0 + psum1 + psum2 + psum3;
                res[row] += psum4 + psum5 + psum6 + psum7;
                for (int col = extra; col < cols; col++)
                    res[row] += a[idx + col] * x[col];
                res[row] += y[row];
                idx += cols;
            }
            if (i < ACTIVATION.length - 1) {
                for (int r = 0; r < ACTIVATION[i].length; ++r) {
                    ACTIVATION[i][r] = Math.max(0, ACTIVATION[i][r]);
                }
            }
            if (i == ACTIVATION.length - 1) {
                double max = ACTIVATION[i][0];
                for (int r = 1; r < ACTIVATION[i].length; r++) {
                    if (ACTIVATION[i][r] > max) max = ACTIVATION[i][r];
                }
                double scale = 0;
                for (int r = 0; r < ACTIVATION[i].length; r++) {
                    ACTIVATION[i][r] = Math.exp(ACTIVATION[i][r] - max);
                    scale += ACTIVATION[i][r];
                }
                for (int r = 0; r < ACTIVATION[i].length; r++) {
                    if (Double.isNaN(ACTIVATION[i][r]))
                        throw new RuntimeException("Numerical instability, predicted NaN.");
                    ACTIVATION[i][r] /= scale;
                    preds[r + 1] = ACTIVATION[i][r];
                }
            }
        }
        preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, 0.5);
        return preds;
    }

    static class NORMMUL implements java.io.Serializable {
        public static final double[] VALUES = new double[8];

        static {
            NORMMUL_0.fill(VALUES);
        }

        static final class NORMMUL_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.10787933742662743;
                sa[1] = 0.10021989151872551;
                sa[2] = 0.09776929876175253;
                sa[3] = 0.09135056624341212;
                sa[4] = 0.15226738237767037;
                sa[5] = 0.1258177316803281;
                sa[6] = 0.11297872204784414;
                sa[7] = 0.10149513048128626;
            }
        }
    }

    static class NORMSUB implements java.io.Serializable {
        public static final double[] VALUES = new double[8];

        static {
            NORMSUB_0.fill(VALUES);
        }

        static final class NORMSUB_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = -72.3496130952381;
                sa[1] = -76.85505952380953;
                sa[2] = -72.79279761904762;
                sa[3] = -74.93684523809524;
                sa[4] = -82.13252976190476;
                sa[5] = -85.07261904761907;
                sa[6] = -80.49937499999997;
                sa[7] = -84.17910714285715;
            }
        }
    }


    // Neuron activation values for Input layer
    static class EightIn_Activation_0 implements java.io.Serializable {
        public static final double[] VALUES = new double[8];

        static {
            EightIn_Activation_0_0.fill(VALUES);
        }

        static final class EightIn_Activation_0_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
                sa[7] = 0.0;
            }
        }
    }

    // Neuron activation values for Rectifier layer
    static class EightIn_Activation_1 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            EightIn_Activation_1_0.fill(VALUES);
        }

        static final class EightIn_Activation_1_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
                sa[7] = 0.0;
                sa[8] = 0.0;
                sa[9] = 0.0;
                sa[10] = 0.0;
                sa[11] = 0.0;
                sa[12] = 0.0;
                sa[13] = 0.0;
                sa[14] = 0.0;
                sa[15] = 0.0;
            }
        }
    }

    // Neuron activation values for Rectifier layer
    static class EightIn_Activation_2 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            EightIn_Activation_2_0.fill(VALUES);
        }

        static final class EightIn_Activation_2_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
                sa[7] = 0.0;
                sa[8] = 0.0;
                sa[9] = 0.0;
                sa[10] = 0.0;
                sa[11] = 0.0;
                sa[12] = 0.0;
                sa[13] = 0.0;
                sa[14] = 0.0;
                sa[15] = 0.0;
            }
        }
    }

    // Neuron activation values for Softmax layer
    static class EightIn_Activation_3 implements java.io.Serializable {
        public static final double[] VALUES = new double[7];

        static {
            EightIn_Activation_3_0.fill(VALUES);
        }

        static final class EightIn_Activation_3_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.0;
                sa[1] = 0.0;
                sa[2] = 0.0;
                sa[3] = 0.0;
                sa[4] = 0.0;
                sa[5] = 0.0;
                sa[6] = 0.0;
            }
        }
    }

    // Neuron bias values for Input layer
    static class EightIn_Bias_0 implements java.io.Serializable {
        public static final double[] VALUES = null;
    }

    // Neuron bias values for Rectifier layer
    static class EightIn_Bias_1 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            EightIn_Bias_1_0.fill(VALUES);
        }

        static final class EightIn_Bias_1_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.3575720568724687;
                sa[1] = 0.5717999327724657;
                sa[2] = 0.317757105238403;
                sa[3] = 0.10037808968954084;
                sa[4] = 0.8663924744581312;
                sa[5] = 0.5802831727018414;
                sa[6] = 0.7615664555913657;
                sa[7] = 0.7742259131899301;
                sa[8] = 0.38342043920623226;
                sa[9] = 1.714835436083134;
                sa[10] = 1.4048817118492418;
                sa[11] = -0.06990347044698511;
                sa[12] = 0.4177766045522853;
                sa[13] = 0.24939665354393853;
                sa[14] = 0.32369687320995905;
                sa[15] = 1.524593024825621;
            }
        }
    }

    // Neuron bias values for Rectifier layer
    static class EightIn_Bias_2 implements java.io.Serializable {
        public static final double[] VALUES = new double[16];

        static {
            EightIn_Bias_2_0.fill(VALUES);
        }

        static final class EightIn_Bias_2_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = 0.6890373976869019;
                sa[1] = 1.4436072630041554;
                sa[2] = 1.1964815116064735;
                sa[3] = 0.8774049791565217;
                sa[4] = 1.0263142939635914;
                sa[5] = 0.7614849659333671;
                sa[6] = 1.2501520046614563;
                sa[7] = 0.9502476238069801;
                sa[8] = 0.95992436807589;
                sa[9] = 1.2521648752828087;
                sa[10] = 0.9484561387194776;
                sa[11] = 0.9416216528907035;
                sa[12] = 1.6059376698757994;
                sa[13] = 0.6397270844687861;
                sa[14] = 1.2709105468821065;
                sa[15] = 1.2200303854010255;
            }
        }
    }

    // Neuron bias values for Softmax layer
    static class EightIn_Bias_3 implements java.io.Serializable {
        public static final double[] VALUES = new double[7];

        static {
            EightIn_Bias_3_0.fill(VALUES);
        }

        static final class EightIn_Bias_3_0 implements java.io.Serializable {
            static final void fill(double[] sa) {
                sa[0] = -0.11478993458084913;
                sa[1] = 0.34128366543803623;
                sa[2] = -0.26798566644719807;
                sa[3] = 0.24562365963174884;
                sa[4] = 0.31416849233845645;
                sa[5] = 0.1569295100448703;
                sa[6] = -0.27374614659920865;
            }
        }
    }

    static class EightIn_Weight_0 implements java.io.Serializable {
        public static final float[] VALUES = null;
    }

    // Neuron weights connecting Input and Rectifier layer
    static class EightIn_Weight_1 implements java.io.Serializable {
        public static final float[] VALUES = new float[128];

        static {
            EightIn_Weight_1_0.fill(VALUES);
        }

        static final class EightIn_Weight_1_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = 0.09629933f;
                sa[1] = 0.3768357f;
                sa[2] = -0.0346859f;
                sa[3] = -0.38663456f;
                sa[4] = -0.1677527f;
                sa[5] = 0.16147837f;
                sa[6] = -0.3340416f;
                sa[7] = 0.53114396f;
                sa[8] = 0.070912905f;
                sa[9] = 0.5063704f;
                sa[10] = -0.3644255f;
                sa[11] = -0.26823145f;
                sa[12] = 0.025868693f;
                sa[13] = 0.49056357f;
                sa[14] = 0.06742731f;
                sa[15] = -0.42685053f;
                sa[16] = 0.3383785f;
                sa[17] = 0.15976983f;
                sa[18] = 0.102630995f;
                sa[19] = 0.39583388f;
                sa[20] = -0.38788578f;
                sa[21] = -0.6984097f;
                sa[22] = 0.31889504f;
                sa[23] = 0.9031523f;
                sa[24] = 0.32297197f;
                sa[25] = 0.5557797f;
                sa[26] = 0.23449497f;
                sa[27] = -0.56676614f;
                sa[28] = -0.18599862f;
                sa[29] = 0.6036119f;
                sa[30] = -0.39639166f;
                sa[31] = -0.27439186f;
                sa[32] = 0.10580012f;
                sa[33] = 0.46635953f;
                sa[34] = 0.1695623f;
                sa[35] = 0.21964276f;
                sa[36] = 0.636266f;
                sa[37] = -0.6808216f;
                sa[38] = -0.03187526f;
                sa[39] = -0.18852586f;
                sa[40] = -0.52804404f;
                sa[41] = 0.09745762f;
                sa[42] = 0.17781055f;
                sa[43] = -0.93187153f;
                sa[44] = 0.59059113f;
                sa[45] = -0.6814125f;
                sa[46] = 0.10803944f;
                sa[47] = -0.42310998f;
                sa[48] = -0.16957748f;
                sa[49] = -0.12802137f;
                sa[50] = -0.234872f;
                sa[51] = -0.56888276f;
                sa[52] = -0.08259862f;
                sa[53] = 0.20255902f;
                sa[54] = -0.63319755f;
                sa[55] = -0.12351762f;
                sa[56] = 0.06727223f;
                sa[57] = -0.20783551f;
                sa[58] = -0.03955432f;
                sa[59] = 0.13177487f;
                sa[60] = 0.21976945f;
                sa[61] = 0.4378624f;
                sa[62] = 0.5856735f;
                sa[63] = -0.83251625f;
                sa[64] = 0.5457055f;
                sa[65] = 0.037895918f;
                sa[66] = -0.018609213f;
                sa[67] = 0.56819075f;
                sa[68] = -0.83470243f;
                sa[69] = -0.09235397f;
                sa[70] = -0.107463956f;
                sa[71] = -0.2953979f;
                sa[72] = 0.0954682f;
                sa[73] = 0.49171394f;
                sa[74] = 0.23661947f;
                sa[75] = -0.8127944f;
                sa[76] = -0.11931856f;
                sa[77] = -0.48970458f;
                sa[78] = -0.48088202f;
                sa[79] = -0.4760938f;
                sa[80] = 0.34656712f;
                sa[81] = -0.54009926f;
                sa[82] = -0.3902794f;
                sa[83] = -0.5696197f;
                sa[84] = 0.1731092f;
                sa[85] = -0.33926392f;
                sa[86] = -0.16690648f;
                sa[87] = -0.12206534f;
                sa[88] = 0.6487802f;
                sa[89] = 0.31217805f;
                sa[90] = -0.86855024f;
                sa[91] = 0.45523593f;
                sa[92] = 1.0630734f;
                sa[93] = 0.2713697f;
                sa[94] = 0.021387981f;
                sa[95] = 0.9757124f;
                sa[96] = 0.81169295f;
                sa[97] = 0.26211226f;
                sa[98] = -0.3206262f;
                sa[99] = 0.4730313f;
                sa[100] = 0.022405239f;
                sa[101] = 0.050856806f;
                sa[102] = -0.4615996f;
                sa[103] = -0.6751378f;
                sa[104] = 0.3629002f;
                sa[105] = 0.13488905f;
                sa[106] = 1.0533596f;
                sa[107] = -0.7698024f;
                sa[108] = 0.48738575f;
                sa[109] = 0.10590422f;
                sa[110] = -0.122197f;
                sa[111] = 0.505236f;
                sa[112] = -0.22063242f;
                sa[113] = 0.02291971f;
                sa[114] = 0.19456483f;
                sa[115] = -0.52128935f;
                sa[116] = 0.18601143f;
                sa[117] = 0.58077776f;
                sa[118] = -0.5913626f;
                sa[119] = 0.35461912f;
                sa[120] = 0.11515358f;
                sa[121] = -0.5827545f;
                sa[122] = -0.36454475f;
                sa[123] = 0.23052098f;
                sa[124] = -0.31783015f;
                sa[125] = -0.21837299f;
                sa[126] = 0.4305151f;
                sa[127] = 0.5588585f;
            }
        }
    }

    // Neuron weights connecting Rectifier and Rectifier layer
    static class EightIn_Weight_2 implements java.io.Serializable {
        public static final float[] VALUES = new float[256];

        static {
            EightIn_Weight_2_0.fill(VALUES);
        }

        static final class EightIn_Weight_2_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = -0.49748924f;
                sa[1] = 0.016771972f;
                sa[2] = 0.26315802f;
                sa[3] = 0.51453304f;
                sa[4] = 0.41549614f;
                sa[5] = -0.70859253f;
                sa[6] = -0.062387567f;
                sa[7] = 0.029417628f;
                sa[8] = 0.68663687f;
                sa[9] = -0.4875772f;
                sa[10] = -1.2333722f;
                sa[11] = 0.70905507f;
                sa[12] = -0.11585524f;
                sa[13] = 0.22154987f;
                sa[14] = 0.18223785f;
                sa[15] = -0.4789692f;
                sa[16] = -0.37875125f;
                sa[17] = 0.2509308f;
                sa[18] = 0.67423123f;
                sa[19] = -0.19238351f;
                sa[20] = 0.077318415f;
                sa[21] = -0.49171254f;
                sa[22] = -0.16645171f;
                sa[23] = -0.35212734f;
                sa[24] = -0.2983643f;
                sa[25] = 0.43100974f;
                sa[26] = 0.7041814f;
                sa[27] = -0.28948843f;
                sa[28] = -0.31437683f;
                sa[29] = -0.30718336f;
                sa[30] = 0.4883029f;
                sa[31] = 0.39962572f;
                sa[32] = -0.82353973f;
                sa[33] = -0.33543113f;
                sa[34] = 0.021708988f;
                sa[35] = -0.14326109f;
                sa[36] = -0.061819486f;
                sa[37] = 0.069321625f;
                sa[38] = -0.06555511f;
                sa[39] = -0.038961936f;
                sa[40] = -0.4022645f;
                sa[41] = -0.050625816f;
                sa[42] = -0.29261786f;
                sa[43] = 0.53150594f;
                sa[44] = 0.18788482f;
                sa[45] = 0.9502415f;
                sa[46] = -0.43659535f;
                sa[47] = 0.6596261f;
                sa[48] = -0.31362152f;
                sa[49] = -1.2026368f;
                sa[50] = 0.6335898f;
                sa[51] = -0.2707606f;
                sa[52] = 0.095453426f;
                sa[53] = -4.207403E-4f;
                sa[54] = -0.20992309f;
                sa[55] = 0.12506497f;
                sa[56] = 0.2904967f;
                sa[57] = -0.7275776f;
                sa[58] = 0.20766316f;
                sa[59] = 0.65468043f;
                sa[60] = 0.104844674f;
                sa[61] = 0.41498008f;
                sa[62] = 0.13745491f;
                sa[63] = 0.07389176f;
                sa[64] = -0.04222113f;
                sa[65] = -0.37102693f;
                sa[66] = -0.06196514f;
                sa[67] = -0.4816307f;
                sa[68] = 0.24881497f;
                sa[69] = 0.114243776f;
                sa[70] = 0.08354824f;
                sa[71] = 0.6684658f;
                sa[72] = 0.011647065f;
                sa[73] = -0.41297913f;
                sa[74] = -0.015236166f;
                sa[75] = -0.39640734f;
                sa[76] = 0.07899632f;
                sa[77] = -1.0044408f;
                sa[78] = 0.48775584f;
                sa[79] = -0.09416375f;
                sa[80] = 0.4935081f;
                sa[81] = -0.25727504f;
                sa[82] = 0.36338294f;
                sa[83] = 0.231089f;
                sa[84] = -0.33317178f;
                sa[85] = 0.06558001f;
                sa[86] = -0.23606637f;
                sa[87] = 0.31427097f;
                sa[88] = -0.18598676f;
                sa[89] = -0.022774976f;
                sa[90] = 0.09567366f;
                sa[91] = -0.22669888f;
                sa[92] = 0.30370712f;
                sa[93] = 0.36841616f;
                sa[94] = 0.06759295f;
                sa[95] = 0.21712583f;
                sa[96] = 0.30320233f;
                sa[97] = -0.13733645f;
                sa[98] = -0.16066295f;
                sa[99] = -0.25649908f;
                sa[100] = -0.048781235f;
                sa[101] = -0.78045326f;
                sa[102] = 0.21608146f;
                sa[103] = -0.3363688f;
                sa[104] = 0.42875496f;
                sa[105] = -0.16088286f;
                sa[106] = -0.48947498f;
                sa[107] = -0.7484942f;
                sa[108] = 0.2910149f;
                sa[109] = -0.005727111f;
                sa[110] = 0.259055f;
                sa[111] = 0.18655695f;
                sa[112] = -0.08591498f;
                sa[113] = -0.15617907f;
                sa[114] = 0.20977949f;
                sa[115] = 0.11676956f;
                sa[116] = 0.6255963f;
                sa[117] = 0.118847065f;
                sa[118] = -0.40457317f;
                sa[119] = 0.36194444f;
                sa[120] = -0.2569695f;
                sa[121] = 0.40522757f;
                sa[122] = -0.3034983f;
                sa[123] = -0.8146202f;
                sa[124] = 0.11695095f;
                sa[125] = 0.33061942f;
                sa[126] = -0.75969565f;
                sa[127] = 0.09652171f;
                sa[128] = 0.8823807f;
                sa[129] = 0.08182577f;
                sa[130] = -0.15564734f;
                sa[131] = 0.24585739f;
                sa[132] = -0.16786614f;
                sa[133] = 0.09670748f;
                sa[134] = 0.055203315f;
                sa[135] = 0.23188178f;
                sa[136] = 0.067802235f;
                sa[137] = 0.33123326f;
                sa[138] = 0.19353409f;
                sa[139] = -0.4675291f;
                sa[140] = 0.24822961f;
                sa[141] = -0.30851135f;
                sa[142] = 0.05745909f;
                sa[143] = 0.6236625f;
                sa[144] = -0.56288934f;
                sa[145] = -0.14828776f;
                sa[146] = 0.05921288f;
                sa[147] = -0.2502184f;
                sa[148] = -0.17782277f;
                sa[149] = 0.46857664f;
                sa[150] = -0.031214816f;
                sa[151] = 0.37831843f;
                sa[152] = -0.628873f;
                sa[153] = 0.116683364f;
                sa[154] = 0.10732565f;
                sa[155] = 0.28629914f;
                sa[156] = -0.14646998f;
                sa[157] = -0.48949787f;
                sa[158] = -0.22504751f;
                sa[159] = 0.17235023f;
                sa[160] = -0.4922701f;
                sa[161] = 0.4044076f;
                sa[162] = 0.9994714f;
                sa[163] = -0.07715974f;
                sa[164] = 0.5418935f;
                sa[165] = -0.28737327f;
                sa[166] = 0.14128849f;
                sa[167] = 0.35401827f;
                sa[168] = -0.124409504f;
                sa[169] = -0.2854065f;
                sa[170] = -0.43707815f;
                sa[171] = 0.4945503f;
                sa[172] = -0.25131378f;
                sa[173] = 0.38872412f;
                sa[174] = 0.23086911f;
                sa[175] = -0.5062904f;
                sa[176] = 0.5286017f;
                sa[177] = -0.60142136f;
                sa[178] = -0.28263882f;
                sa[179] = 0.5106952f;
                sa[180] = 0.40193915f;
                sa[181] = 0.060155082f;
                sa[182] = -0.28115398f;
                sa[183] = -0.09672286f;
                sa[184] = 0.4640539f;
                sa[185] = 0.48369253f;
                sa[186] = -0.19347115f;
                sa[187] = 0.046237845f;
                sa[188] = 0.45985317f;
                sa[189] = 0.029454026f;
                sa[190] = -0.04994149f;
                sa[191] = -0.25479063f;
                sa[192] = -0.2187527f;
                sa[193] = 0.47506008f;
                sa[194] = -0.32038212f;
                sa[195] = -0.4948877f;
                sa[196] = 0.6757923f;
                sa[197] = 0.66414994f;
                sa[198] = -0.16414736f;
                sa[199] = 0.91983384f;
                sa[200] = 0.19101146f;
                sa[201] = 0.19730361f;
                sa[202] = 0.9779719f;
                sa[203] = -0.3158156f;
                sa[204] = -0.34214568f;
                sa[205] = -0.33801058f;
                sa[206] = -0.070139065f;
                sa[207] = 0.12118204f;
                sa[208] = 0.43341285f;
                sa[209] = -0.1481264f;
                sa[210] = 0.08927822f;
                sa[211] = -0.30532584f;
                sa[212] = -0.24067718f;
                sa[213] = 0.35398304f;
                sa[214] = 0.39913583f;
                sa[215] = -0.07236161f;
                sa[216] = -0.32196853f;
                sa[217] = 0.16218668f;
                sa[218] = 0.46525523f;
                sa[219] = 0.22667554f;
                sa[220] = 0.1171541f;
                sa[221] = -0.017038144f;
                sa[222] = 0.07147352f;
                sa[223] = 0.29125157f;
                sa[224] = -0.19446424f;
                sa[225] = -0.016243294f;
                sa[226] = 0.36715487f;
                sa[227] = -0.45841572f;
                sa[228] = -0.2527463f;
                sa[229] = -0.7093243f;
                sa[230] = -0.3962956f;
                sa[231] = 0.66019034f;
                sa[232] = -0.64495534f;
                sa[233] = 0.47113526f;
                sa[234] = -0.116607055f;
                sa[235] = -0.12229863f;
                sa[236] = 0.6243885f;
                sa[237] = -0.40111083f;
                sa[238] = 0.11861142f;
                sa[239] = -0.213794f;
                sa[240] = -0.14639753f;
                sa[241] = -0.015190265f;
                sa[242] = 0.01362033f;
                sa[243] = 0.06829492f;
                sa[244] = 0.9156218f;
                sa[245] = -0.33225143f;
                sa[246] = 0.0014632407f;
                sa[247] = -0.3104987f;
                sa[248] = 0.30842036f;
                sa[249] = -0.45265448f;
                sa[250] = -0.13401122f;
                sa[251] = 0.2370324f;
                sa[252] = 0.30260235f;
                sa[253] = -0.76720804f;
                sa[254] = 0.059531953f;
                sa[255] = 0.5040332f;
            }
        }
    }

    // Neuron weights connecting Rectifier and Softmax layer
    static class EightIn_Weight_3 implements java.io.Serializable {
        public static final float[] VALUES = new float[112];

        static {
            EightIn_Weight_3_0.fill(VALUES);
        }

        static final class EightIn_Weight_3_0 implements java.io.Serializable {
            static final void fill(float[] sa) {
                sa[0] = -1.7917508f;
                sa[1] = 0.72227097f;
                sa[2] = 1.0536308f;
                sa[3] = 1.485382f;
                sa[4] = -2.3333046f;
                sa[5] = 1.8671117f;
                sa[6] = -2.3868423f;
                sa[7] = 0.76616096f;
                sa[8] = 1.1159422f;
                sa[9] = -0.70808583f;
                sa[10] = 1.4386523f;
                sa[11] = -3.4987726f;
                sa[12] = -0.5382385f;
                sa[13] = 1.4921069f;
                sa[14] = -0.29581535f;
                sa[15] = -1.3994085f;
                sa[16] = -0.4744996f;
                sa[17] = 2.280126f;
                sa[18] = -2.5652473f;
                sa[19] = -2.625619f;
                sa[20] = -0.9823364f;
                sa[21] = -1.4125339f;
                sa[22] = -2.919599f;
                sa[23] = -4.9971004f;
                sa[24] = -0.49172288f;
                sa[25] = 0.7001877f;
                sa[26] = 1.8342184f;
                sa[27] = 0.16214122f;
                sa[28] = 2.3643906f;
                sa[29] = -1.206444f;
                sa[30] = 1.8628237f;
                sa[31] = -2.2792623f;
                sa[32] = -1.4280483f;
                sa[33] = 0.08249023f;
                sa[34] = 1.5933092f;
                sa[35] = 0.5811786f;
                sa[36] = 0.66215444f;
                sa[37] = -0.68219453f;
                sa[38] = -3.31588f;
                sa[39] = 1.0883205f;
                sa[40] = -0.13864371f;
                sa[41] = 0.0038722036f;
                sa[42] = -1.9066844f;
                sa[43] = 0.806069f;
                sa[44] = 1.0711428f;
                sa[45] = -1.6843382f;
                sa[46] = 1.2163415f;
                sa[47] = 1.1559672f;
                sa[48] = -2.1338558f;
                sa[49] = 1.8630817f;
                sa[50] = -0.06040598f;
                sa[51] = -1.6030825f;
                sa[52] = 1.1443628f;
                sa[53] = -1.0249578f;
                sa[54] = 1.3583671f;
                sa[55] = -1.8993309f;
                sa[56] = 1.4783973f;
                sa[57] = 0.6294667f;
                sa[58] = -3.5245395f;
                sa[59] = -2.0653846f;
                sa[60] = 0.93296325f;
                sa[61] = -0.570246f;
                sa[62] = -2.309409f;
                sa[63] = 1.0625292f;
                sa[64] = -2.0151916f;
                sa[65] = -0.21213505f;
                sa[66] = -2.2385519f;
                sa[67] = 1.0262293f;
                sa[68] = 1.4474854f;
                sa[69] = 2.355487f;
                sa[70] = 0.8165466f;
                sa[71] = -1.6280165f;
                sa[72] = 1.8482507f;
                sa[73] = -3.4442286f;
                sa[74] = -0.0735383f;
                sa[75] = 0.57513446f;
                sa[76] = 0.8137487f;
                sa[77] = -0.009187273f;
                sa[78] = -1.1082894f;
                sa[79] = -0.53193295f;
                sa[80] = 1.907317f;
                sa[81] = -1.9384146f;
                sa[82] = 1.0453382f;
                sa[83] = -0.5384003f;
                sa[84] = -0.3267903f;
                sa[85] = 0.8593526f;
                sa[86] = -0.888485f;
                sa[87] = 2.3494985f;
                sa[88] = 0.87211126f;
                sa[89] = -3.3444872f;
                sa[90] = -2.1037343f;
                sa[91] = 2.529899f;
                sa[92] = -1.1705585f;
                sa[93] = -0.88319254f;
                sa[94] = -2.0075574f;
                sa[95] = 0.880145f;
                sa[96] = 2.148545f;
                sa[97] = -1.0868396f;
                sa[98] = 1.9084262f;
                sa[99] = 1.8807899f;
                sa[100] = 0.89275664f;
                sa[101] = 0.731096f;
                sa[102] = 1.2880292f;
                sa[103] = -0.09127822f;
                sa[104] = -1.0053889f;
                sa[105] = -1.7338016f;
                sa[106] = 0.81013745f;
                sa[107] = -0.72136796f;
                sa[108] = -0.33970648f;
                sa[109] = -0.5743455f;
                sa[110] = -2.6277227f;
                sa[111] = 1.3570403f;
            }
        }
    }

    // The class representing training column names
    static class NamesHolder_EightIn implements java.io.Serializable {
        public static final String[] VALUES = new String[8];

        static {
            NamesHolder_EightIn_0.fill(VALUES);
        }

        static final class NamesHolder_EightIn_0 implements java.io.Serializable {
            static final void fill(String[] sa) {
                sa[0] = "RSSI LEFT_ORIGIN";
                sa[1] = "RSSI MIDDLE_ORIGIN";
                sa[2] = "RSSI RIGHT_ORIGIN";
                sa[3] = "RSSI TRUNK_ORIGIN";
                sa[4] = "RSSI FRONTLEFT_ORIGIN";
                sa[5] = "RSSI FRONTRIGHT_ORIGIN";
                sa[6] = "RSSI REARLEFT_ORIGIN";
                sa[7] = "RSSI REARRIGHT_ORIGIN";
            }
        }
    }

    // The class representing column class
    static class EightIn_ColInfo_8 implements java.io.Serializable {
        public static final String[] VALUES = new String[7];

        static {
            EightIn_ColInfo_8_0.fill(VALUES);
        }

        static final class EightIn_ColInfo_8_0 implements java.io.Serializable {
            static final void fill(String[] sa) {
                sa[0] = "back";
                sa[1] = "front";
                sa[2] = "left";
                sa[3] = "lock";
                sa[4] = "right";
                sa[5] = "start";
                sa[6] = "trunk";
            }
        }
    }
}
